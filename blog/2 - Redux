3 CORE PRINCIPLES OF REDUX

* Single Source of truth. All within one store.

* State is read only. Only dispatching action can change state tree.

* Changes made with pure functions called reducers. 
Reducers accept: Previous State & Action
Reducers return new State. They don't mutate previous one.



Reducers work like Array.prototype.reduce function.
Executes function for every item in array to reduce to a single value.

const reducer = (prevState, action) => newState



Actions are plain objects. They require 1 property, "type"

const action = {
	type: 'INCREMENT_COUNTER',
	incrementBy: 2
}


Creators are functions that return actions.

const increment = (incrementBy) => ({
	type: 'INCREMENT_COUNTER',
	incrementBy
})



Redux Cycle from Timer example

1. "Set Time" Action Creator is sent to Dispatcher
2. Dispatcher sends the current state and "Set Time" to the Reducer
3. Reducer does a case/switch Action and returns merged state to Dispatcher.
4. Dispatcher sends merged state to onStateChange function.
5. onStateChange does logic and updates view.




The store is an object that provides a small API to put the reducer/dispatcher together.

const store = createStore(reducer, preloadedState(optional), enhancer(optional) );

4 methods exposed by createStore:

1. store.dispatch(action)
2. store.getState()
3. store.subscribe(listener)
4. store.replaceReducer(reducer)



You can bind action creators to the dispatch method with Redux to prevent unnecessary steps

bindActionCreators(actionCreators, dispatchMethod)

const store = createStore(reducer);
const originialActions = require('/.actions')
const actions = bindActionCreators(originalActions, store.dispatch)



One giant Reducer function for all actions would be unwieldy.
Break them up an then use Redux's combineReducers function to put them back together.
Each reducer still only manages the slice of the state assigned to it.

const reducer = combineReducers({
	todoList: todoListReducer,
	chatMessages: chatMessagesReducer
})



Store enhancers can expand the functionality of Redux by allowing the definition of Reducer functions in a Map JS native object.
One application of a store enhancer is to "time travel" with Redux along with the Redux DevTools Extension
