3 CORE PRINCIPLES OF REDUX

* Single Source of truth. All within one store.

* State is read only. Only dispatching action can change state tree.

* Changes made with pure functions called reducers. 
Reducers accept: Previous State & Action
Reducers return new State. They don't mutate previous one.



Reducers work like Array.prototype.reduce function.
Executes function for every item in array to reduce to a single value.

const reducer = (prevState, action) => newState



Actions are plain objects. They require 1 property, "type"

const action = {
	type: 'INCREMENT_COUNTER',
	incrementBy: 2
}


Creators are functions that return actions.

const increment = (incrementBy) => ({
	type: 'INCREMENT_COUNTER',
	incrementBy
})



Redux Cycle from Timer example

1. "Set Time" Action Creator is sent to Dispatcher
2. Dispatcher sends the current state and "Set Time" to the Reducer
3. Reducer does a case/switch Action and returns merged state to Dispatcher.
4. Dispatcher sends merged state to onStateChange function.
5. onStateChange does logic and updates view.